import os
import numpy as np
import pickle as pkl
import scipy.sparse as sp
import json
import pandas as pd
from scipy.sparse import csr_matrix
from _collections import defaultdict


datadir = "/mnt/datasets/zeyu/HIN_DATA"
def createData(basedir = "/mnt/datasets/zeyu/HIN_DATA/"):
    nodePath = os.path.join(basedir,"graph.node")
    edgePath = os.path.join(basedir,"graph.edge")
    nodes = pd.read_csv(nodePath, names=["num", "type", "node"], delimiter=",")
    edges = pd.read_csv(edgePath, names=["node1", "node2"], delimiter=",")
    arow = []
    acol = []
    brow =[]
    bcol =[]

    drow = []
    dcol = []
    erow = []
    ecol = []
    frow = []
    fcol = []
    for index,row in edges.iterrows():
        if nodes.iloc[row[0],1]=="pefile" and nodes.iloc[row[1],1]=="export":
            arow.append(row[0])
            acol.append(row[1])
        if nodes.iloc[row[0], 1] == "pefile" and nodes.iloc[row[1], 1] == "imports":
            brow.append(row[0])
            bcol.append(row[1])
        if nodes.iloc[row[0], 1] == "pefile" and nodes.iloc[row[1], 1] == "characteristics":
            drow.append(row[0])
            dcol.append(row[1])
        if nodes.iloc[row[0], 1] == "pefile" and nodes.iloc[row[1], 1] == "dll_characteristics":
            erow.append(row[0])
            ecol.append(row[1])
        if nodes.iloc[row[0], 1] == "pefile" and nodes.iloc[row[1], 1] == "sections":
            frow.append(row[0])
            fcol.append(row[1])
    martixs = [csr_matrix(([1] * len(arow), (arow, acol))),
               csr_matrix(([1] * len(brow), (brow, bcol))),
               csr_matrix(([1] * len(drow), (drow, dcol))),
               csr_matrix(([1] * len(erow), (erow, ecol))),
               csr_matrix(([1] * len(frow), (frow, fcol))),
               ]
    names = ["pe_export","pe_imports","pe_characteristics","pe_dll_characteristics","pe_sections"]
    for i in range (len(martixs)):
        martix = martixs[i]
        name = names[i]
        sp.save_npz(os.path.join(datadir,""+name+".npz"),martix)
createData()